const fs = require('fs');
const path = require('path');
const axios = require('axios');

// Simulated database
const db = {
    users: {},
    groups: {}
};

const ownerId = ['123456789']; // Your Telegram User ID(s) here

async function giftedLoadDatabase(Gifted, m) {
    const userId = m.from.id;
    const chatId = m.chat.id;
    const chatType = m.chat.type;
    if (!db.users[userId]) {
        db.users[userId] = {
            username: m.from.username
        };
    }
    if (chatType === 'group' || chatType === 'supergroup') {
        if (!db.groups[chatId]) {
            db.groups[chatId] = {
                groupName: m.chat.title
            };
        }
    }
}

async function giftedCustomMessage(Gifted, m) {
    const userId = m.from.id;
    const chatType = m.chat.type;

    m.isOwner = ownerId.includes(userId.toString());
    m.isGroup = chatType === 'group' || chatType === 'supergroup';
    m.isPrivate = !m.isGroup;

    // Button Menu Pages
    const menuPages = {
        1: [
            [{ text: 'üß† AI', feature: 'menu_ai' }, { text: 'üñº Anime', feature: 'menu_anime' }],
            [{ text: '‚¨áÔ∏è Downloader', feature: 'menu_downloader' }, { text: 'üõ† Tools', feature: 'menu_tools' }],
            [{ text: '‚û°Ô∏è Next', feature: 'menu_page_2' }]
        ],
        2: [
            [{ text: 'üß© General', feature: 'menu_general' }, { text: 'üîû NSFW', feature: 'menu_nsfw' }],
            [{ text: 'üîç Search', feature: 'menu_search' }],
            [{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_1' }]
        ]
    };

    const buildMenuText = (m) => `
‚ï≠‚ïê‚ïê„Äò„Äò *CYBER-MD* „Äô„Äô‚ïê‚ä∑
‚îÉ‚ùç *User:* @${m.from.username || 'N/A'}
‚îÉ‚ùç *User ID:* ${m.from.id}
‚îÉ‚ùç *Owner:* ${m.isOwner ? '‚úÖ Yes' : '‚ùå No'}
‚îÉ‚ùç *Prefix:* /
‚îÉ‚ùç *Version:* 2.0.0
‚îÉ‚ùç *Time:* ${new Date().toLocaleTimeString()}
‚îÉ‚ùç *Date:* ${new Date().toLocaleDateString()}
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑

*Select a category below:*`;

    Gifted.reply = async (content, buttonsOrMsg, m) => {
        let buttons = [];

        if (Array.isArray(buttonsOrMsg)) {
            buttons = buttonsOrMsg.map(row => row.map(btn => ({
                text: btn.text,
                callback_data: JSON.stringify({ feature: btn.feature || '', data: btn.data || '' })
            })));
        }

        const options = {
            reply_to_message_id: m.message_id || null,
            parse_mode: 'Markdown',
            reply_markup: buttons.length > 0 ? { inline_keyboard: buttons } : undefined
        };

        if (typeof content === 'string') {
            return await Gifted.sendMessage(m.chat.id, content, options);
        } else if (typeof content === 'object') {
            if (content.text) return await Gifted.sendMessage(m.chat.id, content.text, options);
        }
    };

    // Handle /menu command
    if (m.text && m.text.toLowerCase() === '/menu') {
        return Gifted.reply(buildMenuText(m), menuPages[1], m);
    }

    // Handle callback_query events
    Gifted.on('callback_query', async (callback) => {
        const msg = callback.message;
        const data = JSON.parse(callback.data || '{}');
        const feature = data.feature;

        switch (feature) {
            case 'menu_page_1':
                return Gifted.reply(buildMenuText(callback), menuPages[1], msg);
            case 'menu_page_2':
                return Gifted.reply(buildMenuText(callback), menuPages[2], msg);

            case 'menu_ai':
                return Gifted.reply('*AI Commands:*\n‚úß /flux\n‚úß /gemini\n‚úß /gpt\n‚úß /luminai\n‚úß /sd', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_1' }]], msg);
            case 'menu_anime':
                return Gifted.reply('*Anime Commands:*\n‚úß /konachan\n‚úß /neko\n‚úß /waifu', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_1' }]], msg);
            case 'menu_downloader':
                return Gifted.reply('*Downloader:*\n‚úß /apk\n‚úß /gitclone\n‚úß /play\n‚úß /video\n‚úß /ytmp3\n‚úß /ytmp4', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_1' }]], msg);
            case 'menu_tools':
                return Gifted.reply('*Tools:*\n‚úß /createqr\n‚úß /pastebin', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_1' }]], msg);
            case 'menu_general':
                return Gifted.reply('*General:*\n‚úß /help\n‚úß /menu\n‚úß /ping\n‚úß /repo\n‚úß /system\n‚úß /uptime', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_2' }]], msg);
            case 'menu_nsfw':
                return Gifted.reply('*NSFW:*\n‚úß /hneko\n‚úß /hwaifu', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_2' }]], msg);
            case 'menu_search':
                return Gifted.reply('*Search:*\n‚úß /wikipedia', [[{ text: '‚¨ÖÔ∏è Back', feature: 'menu_page_2' }]], msg);
        }
    });
}

module.exports = { loadDatabase: giftedLoadDatabase, customMessage: giftedCustomMessage };